AWSTemplateFormatVersion: 2010-09-09
Description: >-
  An AWS Serverless Application that uses the ASP.NET Core framework running in
  Amazon Lambda.
Parameters:
  PostCodesWebAPIZipFileName:
    Type: String
    Default: PostCodes.WebAPI.Artifact.zip
    Description: Enter Zip fileName for DotNet Core API.
  CoreArtifactBucketName:
    Type: String
    Default: postcodes-webapi-services
    Description: Enter BucketName to add artifacts for PostCodeAPI-Service.
  ReactArtifactBucketName:
    Type: String
    Default: postcodes-frontend-artifcats
    Description: Enter BucketName to add artifacts for PostCode React Application.
Outputs:
  ApiURL:
    Description: API endpoint URL for Prod environment
    Value: !Sub >-
      https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
Resources:
  ReactBucketName:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref ReactArtifactBucketName
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref ReactBucketName
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref ReactBucketName
                - /*
  AspNetCoreFunctionProxyResourcePermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref AspNetCoreFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/*/*
        - __ApiId__: !Ref ServerlessRestApi
          __Stage__: '*'
  ServerlessRestApiProdStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ServerlessRestApiDeploymentcfb7a37fc3
      RestApiId: !Ref ServerlessRestApi
      StageName: Prod
  AspNetCoreFunctionRootResourcePermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref AspNetCoreFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/*/
        - __ApiId__: !Ref ServerlessRestApi
          __Stage__: '*'
  ServerlessRestApiDeploymentcfb7a37fc3:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      Description: 'RestApi deployment id: cfb7a37fc32efb58b061e718295e786a9a18556f'
      RestApiId: !Ref ServerlessRestApi
      StageName: Stage
  AspNetCoreFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref CoreArtifactBucketName
        S3Key: !Ref PostCodesWebAPIZipFileName
      Handler: 'PostCodes.WebAPI::PostCodes.WebAPI.LambdaEntryPoint::FunctionHandlerAsync'
      MemorySize: 256
      Role: !GetAtt 
        - AspNetCoreFunctionRole
        - Arn
      Runtime: dotnetcore3.1
      Timeout: 30
      Tags:
        - Key: 'lambda:createdBy'
          Value: SAM
  AspNetCoreFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSLambda_FullAccess'
      Tags:
        - Key: 'lambda:createdBy'
          Value: SAM
  ServerlessRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Body:
        info:
          version: '1.0'
          title: !Ref 'AWS::StackName'
        paths:
          '/{proxy+}':
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AspNetCoreFunction.Arn}/invocations
              responses: {}
          /:
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AspNetCoreFunction.Arn}/invocations
              responses: {}
        swagger: '2.0'
Conditions: {}
